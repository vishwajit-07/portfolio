generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model UserPortfolio {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  role       String?
  location   String?
  about      String?
  imageUrl   String?
  address    String?
  contact_no   String?
  email        String @unique
  linkdin_link String?
  password   String
  resumeUrl   String?   

  // Relations
  skills         Skill[]
  projects       Project[]
  experiences    Experience[]
  education      Education[]
  certifications Certification[]   
}


model Skill {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  portfolio   UserPortfolio? @relation(fields: [portfolioId], references: [id])
  portfolioId String?        @db.ObjectId
}

model Project {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  githubLink  String?
  liveLink    String?
  languages   String[]
  screenshots Screenshot[]
  portfolio   UserPortfolio? @relation(fields: [portfolioId], references: [id])
  portfolioId String?        @db.ObjectId
}

model Screenshot {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  project   Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?  @db.ObjectId
}

model Experience {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  companyName String
  role        String?
  startDate   DateTime
  endDate     DateTime?
  description String?
  portfolio   UserPortfolio? @relation(fields: [portfolioId], references: [id])
  portfolioId String?        @db.ObjectId
}

model Education {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  degree      String
  collegeName String
  passoutYear Int
  cgpa        Float?
  portfolio   UserPortfolio? @relation(fields: [portfolioId], references: [id])
  portfolioId String?        @db.ObjectId
}

model Certification {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  srNo        Int
  title       String
  source      String
  date        DateTime
  imageUrl    String?
  portfolio   UserPortfolio? @relation(fields: [portfolioId], references: [id])
  portfolioId String?        @db.ObjectId
}


model NavbarLink {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  label String?
  url   String?
}
